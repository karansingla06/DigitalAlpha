
#Define Sigmoid
import numpy as np

def nonlin(inputval,deriv = False):
        if (deriv==True):
             return (inputval*(1-inputval))
       
        return 1/(1+np.exp(-inputval))
    
#Input Data
inputval = np.array([[1,0,1],
[0,1,1],
[1,1,1],
[1,1,0]])  
     
outputval = np.array([[1],[0],[1],[0]])

seed = np.random.seed(1)

#Synapses

w0 = 2*np.random.random((3,4))-1
w1 = 2*np.random.random((4,1))-1

#Training
i=1
for i in range(100000):
        #Definne Layers
        lay0 = inputval
        lay1 = nonlin(np.dot(lay0,w0))
        lay2 = nonlin(np.dot(lay1,w1))
        #Backpropgation
        lay2_error = outputval- lay2 
        if (i %5000 == 0): 
            print("Delta Error",str(np.mean(abs(lay2_error))))        
#        
#Calculate Deltas
        lay2_delta = lay2_error*nonlin(lay2,deriv=True)  
        lay1_error = lay2_delta.dot(w1.T)
        lay1_delta = lay1_error*nonlin(lay1,deriv=True)
        w1 += lay1.T.dot(lay2_delta)
        w0+= lay0.T.dot(lay1_delta)
print("Output is",lay2)
